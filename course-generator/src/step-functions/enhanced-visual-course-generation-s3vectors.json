{
  "Comment": "üéì Intellilearn Enhanced Course Generator - S3 Vectors Lifecycle Integration",
  "StartAt": "PreparePrompts",
  "States": {
    "PreparePrompts": {
      "Type": "Pass",
      "Comment": "üìù Prepare course generation parameters with S3 Vectors integration",
      "Parameters": {
        "language.$": "$.language",
        "level.$": "$.level",
        "courseType.$": "$.courseType",
        "duration.$": "$.duration",
        "metadata": {
          "courseId.$": "$$.Execution.Name",
          "createdAt.$": "$$.State.EnteredTime",
          "platform": "Intellilearn"
        },
        "currentStep": 1,
        "totalSteps": 4,
        "vectorConfig": {
          "bucketName": "intellilearn-vectors",
          "indexName": "courses-semantic-index"
        },
        "roles": [
          "Course Planner",
          "Curriculum Designer",
          "Exercise Designer", 
          "Assessment Specialist"
        ],
        "results": {}
      },
      "Next": "SearchSimilarOutlines"
    },

    "SearchSimilarOutlines": {
      "Type": "Task",
      "Comment": "üîç RAG: Search for similar course outlines before generating",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-search",
        "Payload": {
          "action": "search_similar",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "queryText.$": "States.Format('{} {} course outline with CEFR objectives and modules', $.language, $.level)",
          "topK": 5,
          "filters": {
            "artifact_type": "course_outline",
            "cefr_level.$": "$.level",
            "language.$": "$.language"
          },
          "returnDistance": true,
          "returnMetadata": true
        }
      },
      "ResultSelector": {
        "similarOutlines.$": "$.Payload.results",
        "searchSummary.$": "$.Payload.summary"
      },
      "ResultPath": "$.ragOutlines",
      "Next": "GenerateOutlineWithRAG",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "GenerateOutline",
          "ResultPath": "$.ragError"
        }
      ]
    },

    "GenerateOutlineWithRAG": {
      "Type": "Task",
      "Comment": "üéØ Generate Course Outline with RAG context",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('You are an expert Course Planner for language education. Create a comprehensive course outline with CEFR-aligned objectives, modules, and assessment strategy for {} level {} course. REFERENCE SIMILAR OUTLINES: {}. Build upon these examples but create original content. Avoid duplicating existing content. Provide a detailed, structured course outline that follows educational best practices and CEFR standards.', $.language, $.level, States.JsonToString($.ragOutlines.similarOutlines))",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Course Planner",
        "timestamp.$": "$$.State.EnteredTime",
        "ragEnhanced": true
      },
      "ResultPath": "$.outlineResult",
      "Next": "GenerateOutlineEmbedding"
    },

    "GenerateOutline": {
      "Type": "Task",
      "Comment": "üéØ Generate Course Outline (fallback without RAG)",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('You are an expert Course Planner for language education. Create a comprehensive course outline with CEFR-aligned objectives, modules, and assessment strategy for {} level {} course. Provide a detailed, structured course outline that follows educational best practices and CEFR standards.', $.language, $.level)",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Course Planner",
        "timestamp.$": "$$.State.EnteredTime",
        "ragEnhanced": false
      },
      "ResultPath": "$.outlineResult",
      "Next": "GenerateOutlineEmbedding"
    },

    "GenerateOutlineEmbedding": {
      "Type": "Task",
      "Comment": "üß† Generate Outline Embedding for S3 Vectors",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-embed-text-v1",
        "Body": {
          "inputText.$": "$.outlineResult.content"
        }
      },
      "ResultSelector": {
        "embedding.$": "$.Body.embedding",
        "artifactType": "course_outline",
        "timestamp.$": "$$.State.EnteredTime"
      },
      "ResultPath": "$.outlineEmbedding",
      "Next": "CheckOutlineDuplicates"
    },

    "CheckOutlineDuplicates": {
      "Type": "Task",
      "Comment": "üîÑ Duplicate Detection: Check if outline is too similar to existing",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-search",
        "Payload": {
          "action": "check_duplicates",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "queryEmbedding.$": "$.outlineEmbedding.embedding",
          "topK": 1,
          "filters": {
            "artifact_type": "course_outline",
            "cefr_level.$": "$.level"
          },
          "duplicateThreshold": 0.95
        }
      },
      "ResultSelector": {
        "isDuplicate.$": "$.Payload.isDuplicate",
        "similarityScore.$": "$.Payload.maxSimilarity",
        "duplicateKey.$": "$.Payload.duplicateKey"
      },
      "ResultPath": "$.duplicateCheck",
      "Next": "EvaluateOutlineDuplication",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "StoreOutlineVector",
          "ResultPath": "$.duplicateError"
        }
      ]
    },

    "EvaluateOutlineDuplication": {
      "Type": "Choice",
      "Comment": "ü§î Decide if outline needs variation due to high similarity",
      "Choices": [
        {
          "Variable": "$.duplicateCheck.isDuplicate",
          "BooleanEquals": true,
          "Next": "GenerateOutlineVariation"
        }
      ],
      "Default": "ValidateOutlineLevel"
    },

    "GenerateOutlineVariation": {
      "Type": "Task",
      "Comment": "üé≤ Generate outline variation to avoid duplication",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('IMPORTANT: The following outline is too similar to existing content: {}. Create a SIGNIFICANTLY DIFFERENT {} level {} course outline that covers the same learning objectives but with different structure, topics, and approach. Ensure originality while maintaining CEFR standards.', $.duplicateCheck.duplicateKey, $.language, $.level)",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.9,
            "topP": 0.95
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Course Planner",
        "timestamp.$": "$$.State.EnteredTime",
        "ragEnhanced": true,
        "variationGenerated": true,
        "originalSimilarity.$": "$.duplicateCheck.similarityScore"
      },
      "ResultPath": "$.outlineResult",
      "Next": "GenerateOutlineEmbedding"
    },

    "ValidateOutlineLevel": {
      "Type": "Task",
      "Comment": "üéØ Guardrails: Validate outline matches intended CEFR level",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-search",
        "Payload": {
          "action": "validate_level",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "queryEmbedding.$": "$.outlineEmbedding.embedding",
          "targetLevel.$": "$.level",
          "topK": 10,
          "filters": {
            "artifact_type": "course_outline"
          }
        }
      },
      "ResultSelector": {
        "levelMatch.$": "$.Payload.levelMatch",
        "confidence.$": "$.Payload.confidence",
        "suggestedLevel.$": "$.Payload.suggestedLevel"
      },
      "ResultPath": "$.levelValidation",
      "Next": "EvaluateLevelMatch",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "StoreOutlineVector",
          "ResultPath": "$.levelValidationError"
        }
      ]
    },

    "EvaluateLevelMatch": {
      "Type": "Choice",
      "Comment": "üéØ Check if outline matches intended CEFR level",
      "Choices": [
        {
          "Variable": "$.levelValidation.levelMatch",
          "BooleanEquals": false,
          "Next": "CorrectOutlineLevel"
        }
      ],
      "Default": "StoreOutlineVector"
    },

    "CorrectOutlineLevel": {
      "Type": "Task",
      "Comment": "üîß Auto-correction: Adjust outline to match intended CEFR level",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('LEVEL CORRECTION NEEDED: The outline appears to be {} level but should be {} level. Adjust the following outline to properly match {} CEFR standards: {}. Ensure vocabulary, grammar complexity, and learning objectives align with {} level requirements.', $.levelValidation.suggestedLevel, $.level, $.level, $.outlineResult.content, $.level)",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Course Planner",
        "timestamp.$": "$$.State.EnteredTime",
        "ragEnhanced": true,
        "levelCorrected": true,
        "originalLevel.$": "$.levelValidation.suggestedLevel",
        "targetLevel.$": "$.level"
      },
      "ResultPath": "$.outlineResult",
      "Next": "GenerateOutlineEmbedding"
    },

    "StoreOutlineVector": {
      "Type": "Task",
      "Comment": "üìä Store Outline Vector in S3 Vectors with rich metadata",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-store",
        "Payload": {
          "action": "store_vector",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "key.$": "States.Format('outline-{}-{}-{}', $.language, $.level, $.metadata.courseId)",
          "embedding.$": "$.outlineEmbedding.embedding",
          "metadata": {
            "artifact_type": "course_outline",
            "course_id.$": "$.metadata.courseId",
            "language.$": "$.language",
            "cefr_level.$": "$.level",
            "course_type.$": "$.courseType",
            "skill_focus": "comprehensive,all_skills",
            "created_at.$": "$.metadata.createdAt",
            "platform": "Intellilearn",
            "generated_by": "Course Planner",
            "quality_score": "0.95",
            "reusability_score": "0.90",
            "rag_enhanced": false,
            "variation_generated": false,
            "level_corrected": false
          }
        }
      },
      "ResultPath": "$.outlineVectorResult",
      "Next": "SearchSimilarLessons",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SearchSimilarLessons",
          "ResultPath": "$.vectorStoreError"
        }
      ]
    },

    "SearchSimilarLessons": {
      "Type": "Task",
      "Comment": "üîç RAG: Search for similar lesson plans for curriculum design",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-search",
        "Payload": {
          "action": "search_similar",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "queryText.$": "States.Format('detailed lesson plans for {} {} language learning with grammar and vocabulary', $.language, $.level)",
          "topK": 3,
          "filters": {
            "artifact_type": "lesson_plan",
            "cefr_level.$": "$.level",
            "language.$": "$.language"
          },
          "returnDistance": true,
          "returnMetadata": true
        }
      },
      "ResultSelector": {
        "similarLessons.$": "$.Payload.results",
        "searchSummary.$": "$.Payload.summary"
      },
      "ResultPath": "$.ragLessons",
      "Next": "GenerateCurriculumWithRAG",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "GenerateCurriculum",
          "ResultPath": "$.ragLessonsError"
        }
      ]
    },

    "GenerateCurriculumWithRAG": {
      "Type": "Task",
      "Comment": "üìö Generate Curriculum with RAG from similar lessons",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('You are an expert Curriculum Designer. Based on this outline: {}, develop detailed curriculum content for the first 3 modules. REFERENCE SIMILAR LESSONS: {}. Use these as inspiration but create original content. Provide comprehensive curriculum with lesson plans, grammar explanations, vocabulary lists, and interactive activities.', $.outlineResult.content, States.JsonToString($.ragLessons.similarLessons))",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Curriculum Designer",
        "timestamp.$": "$$.State.EnteredTime",
        "ragEnhanced": true
      },
      "ResultPath": "$.curriculumResult",
      "Next": "GenerateCurriculumEmbedding"
    },

    "GenerateCurriculum": {
      "Type": "Task",
      "Comment": "üìö Generate Curriculum (fallback without RAG)",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('You are an expert Curriculum Designer. Based on this outline: {}, develop detailed curriculum content for the first 3 modules with lesson plans, grammar, vocabulary, and cultural insights. Provide comprehensive curriculum content with lesson plans, grammar explanations, vocabulary lists, and interactive activities.', $.outlineResult.content)",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Curriculum Designer",
        "timestamp.$": "$$.State.EnteredTime",
        "ragEnhanced": false
      },
      "ResultPath": "$.curriculumResult",
      "Next": "GenerateCurriculumEmbedding"
    },

    "GenerateCurriculumEmbedding": {
      "Type": "Task",
      "Comment": "üß† Generate Curriculum Embedding",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-embed-text-v1",
        "Body": {
          "inputText.$": "$.curriculumResult.content"
        }
      },
      "ResultSelector": {
        "embedding.$": "$.Body.embedding",
        "artifactType": "lesson_plan",
        "timestamp.$": "$$.State.EnteredTime"
      },
      "ResultPath": "$.curriculumEmbedding",
      "Next": "StoreCurriculumVector"
    },

    "StoreCurriculumVector": {
      "Type": "Task",
      "Comment": "üìä Store Curriculum Vector in S3 Vectors",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-store",
        "Payload": {
          "action": "store_vector",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "key.$": "States.Format('curriculum-{}-{}-{}', $.language, $.level, $.metadata.courseId)",
          "embedding.$": "$.curriculumEmbedding.embedding",
          "metadata": {
            "artifact_type": "lesson_plan",
            "course_id.$": "$.metadata.courseId",
            "language.$": "$.language",
            "cefr_level.$": "$.level",
            "skill_focus": "reading,writing,grammar,vocabulary",
            "created_at.$": "$.metadata.createdAt",
            "platform": "Intellilearn",
            "generated_by": "Curriculum Designer",
            "quality_score": "0.90",
            "reusability_score": "0.85",
            "rag_enhanced": false
          }
        }
      },
      "ResultPath": "$.curriculumVectorResult",
      "Next": "GenerateExercises",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "GenerateExercises",
          "ResultPath": "$.curriculumVectorError"
        }
      ]
    },

    "GenerateExercises": {
      "Type": "Task",
      "Comment": "üèãÔ∏è Generate Practice Exercises",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('You are an expert Exercise Designer. Based on this curriculum: {}, design practice exercises including multiple choice, conversations for voice AI, and listening activities with answer keys. Create varied exercises including multiple choice, fill-in-blank, voice practice scenarios for Nova Sonic AI, and answer keys.', $.curriculumResult.content)",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Exercise Designer",
        "timestamp.$": "$$.State.EnteredTime"
      },
      "ResultPath": "$.exercisesResult",
      "Next": "GenerateExercisesEmbedding"
    },

    "GenerateExercisesEmbedding": {
      "Type": "Task",
      "Comment": "üß† Generate Exercises Embedding",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-embed-text-v1",
        "Body": {
          "inputText.$": "$.exercisesResult.content"
        }
      },
      "ResultSelector": {
        "embedding.$": "$.Body.embedding",
        "artifactType": "exercise",
        "timestamp.$": "$$.State.EnteredTime"
      },
      "ResultPath": "$.exercisesEmbedding",
      "Next": "StoreExercisesVector"
    },

    "StoreExercisesVector": {
      "Type": "Task",
      "Comment": "üìä Store Exercises Vector in S3 Vectors",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-store",
        "Payload": {
          "action": "store_vector",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "key.$": "States.Format('exercises-{}-{}-{}', $.language, $.level, $.metadata.courseId)",
          "embedding.$": "$.exercisesEmbedding.embedding",
          "metadata": {
            "artifact_type": "exercise",
            "course_id.$": "$.metadata.courseId",
            "language.$": "$.language",
            "cefr_level.$": "$.level",
            "skill_focus": "speaking,listening,interaction,practice",
            "created_at.$": "$.metadata.createdAt",
            "platform": "Intellilearn",
            "generated_by": "Exercise Designer",
            "quality_score": "0.88",
            "reusability_score": "0.80"
          }
        }
      },
      "ResultPath": "$.exercisesVectorResult",
      "Next": "GenerateAssessments",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "GenerateAssessments",
          "ResultPath": "$.exercisesVectorError"
        }
      ]
    },

    "GenerateAssessments": {
      "Type": "Task",
      "Comment": "üìä Generate Assessment Methods",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-text-express-v1",
        "Body": {
          "inputText.$": "States.Format('You are an expert Assessment Specialist creating {} level {} course assessments. Design comprehensive evaluation methods including: 1) Diagnostic assessments for placement, 2) Progressive quizzes for each module, 3) Voice pronunciation criteria optimized for Nova Sonic AI, 4) CEFR-aligned evaluation rubrics, 5) Speaking fluency assessments, 6) Listening comprehension tests. Focus on {} language learning with {} hours total duration.', $.level, $.language, $.courseType, $.duration.totalHours)",
          "textGenerationConfig": {
            "maxTokenCount": 4000,
            "temperature": 0.7,
            "topP": 0.9
          }
        }
      },
      "ResultSelector": {
        "content.$": "$.Body.results[0].outputText",
        "role": "Assessment Specialist",
        "timestamp.$": "$$.State.EnteredTime"
      },
      "ResultPath": "$.assessmentsResult",
      "Next": "GenerateAssessmentsEmbedding"
    },

    "GenerateAssessmentsEmbedding": {
      "Type": "Task",
      "Comment": "üß† Generate Assessments Embedding",
      "Resource": "arn:aws:states:::bedrock:invokeModel",
      "Parameters": {
        "ModelId": "amazon.titan-embed-text-v1",
        "Body": {
          "inputText.$": "$.assessmentsResult.content"
        }
      },
      "ResultSelector": {
        "embedding.$": "$.Body.embedding",
        "artifactType": "assessment",
        "timestamp.$": "$$.State.EnteredTime"
      },
      "ResultPath": "$.assessmentsEmbedding",
      "Next": "StoreAssessmentsVector"
    },

    "StoreAssessmentsVector": {
      "Type": "Task",
      "Comment": "üìä Store Assessments Vector in S3 Vectors",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-s3vectors-store",
        "Payload": {
          "action": "store_vector",
          "vectorBucket": "intellilearn-vectors",
          "indexName": "courses-semantic-index",
          "key.$": "States.Format('assessment-{}-{}-{}', $.language, $.level, $.metadata.courseId)",
          "embedding.$": "$.assessmentsEmbedding.embedding",
          "metadata": {
            "artifact_type": "assessment",
            "course_id.$": "$.metadata.courseId",
            "language.$": "$.language",
            "cefr_level.$": "$.level",
            "skill_focus": "evaluation,pronunciation,comprehension",
            "created_at.$": "$.metadata.createdAt",
            "platform": "Intellilearn",
            "generated_by": "Assessment Specialist",
            "quality_score": "0.93",
            "reusability_score": "0.88"
          }
        }
      },
      "ResultPath": "$.assessmentsVectorResult",
      "Next": "StoreCourseContent",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "StoreCourseContent",
          "ResultPath": "$.assessmentsVectorError"
        }
      ]
    },

    "StoreCourseContent": {
      "Type": "Task",
      "Comment": "üíæ Store Complete Course to S3",
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "Parameters": {
        "Bucket": "intellilearn-courses-dev",
        "Key.$": "States.Format('courses/{}/{}/course-{}-{}-{}.json', $.language, $.level, $.language, $.level, States.ArrayGetItem(States.StringSplit($.metadata.createdAt, 'T'), 0))",
        "Body.$": "States.JsonToString($)",
        "ContentType": "application/json",
        "Metadata": {
          "Language.$": "$.language",
          "Level.$": "$.level",
          "CourseType.$": "$.courseType",
          "Duration.$": "States.JsonToString($.duration)",
          "CourseId.$": "$.metadata.courseId",
          "Platform": "Intellilearn",
          "GeneratedAt.$": "$.metadata.createdAt",
          "S3VectorsEnabled": "true",
          "RAGEnhanced": "true",
          "VectorsStored": "4"
        }
      },
      "ResultPath": "$.s3Result",
      "Next": "NotifyCompletion"
    },

    "NotifyCompletion": {
      "Type": "Task",
      "Comment": "üìß Send Enhanced Completion Notification",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "intellilearn-course-completion-handler",
        "Payload": {
          "action": "notify_completion",
          "courseId.$": "$.metadata.courseId",
          "language.$": "$.language",
          "level.$": "$.level",
          "courseType.$": "$.courseType",
          "duration.$": "$.duration",
          "s3Location": "s3://intellilearn-app-076276934311/courses/",
          "generatedAt.$": "$.metadata.createdAt",
          "status": "completed",
          "outline.$": "$.outlineResult",
          "curriculum.$": "$.curriculumResult",
          "exercises.$": "$.exercisesResult",
          "assessments.$": "$.assessmentsResult",
          "s3VectorsIntegration": {
            "vectorsStored": 4,
            "ragEnhanced": true,
            "duplicateChecks": true,
            "levelValidation": true,
            "vectorResults": {
              "outline.$": "$.outlineVectorResult",
              "curriculum.$": "$.curriculumVectorResult",
              "exercises.$": "$.exercisesVectorResult",
              "assessments.$": "$.assessmentsVectorResult"
            }
          }
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "Success"
    },

    "Success": {
      "Type": "Pass",
      "Comment": "‚úÖ Enhanced Course Generation with S3 Vectors Completed",
      "Parameters": {
        "status": "SUCCESS",
        "message": "Course generated with full S3 Vectors lifecycle integration",
        "courseId.$": "$.metadata.courseId",
        "language.$": "$.language",
        "level.$": "$.level",
        "courseType.$": "$.courseType",
        "duration.$": "$.duration",
        "s3Location": "s3://intellilearn-app-076276934311/courses/",
        "generatedAt.$": "$.metadata.createdAt",
        "components": {
          "outline": "Generated by Course Planner with RAG + Duplicate Detection + Level Validation",
          "curriculum": "Generated by Curriculum Designer with RAG",
          "exercises": "Generated by Exercise Designer",
          "assessments": "Generated by Assessment Specialist"
        },
        "models": {
          "textGeneration": "amazon.titan-text-express-v1",
          "embedding": "amazon.titan-embed-text-v1"
        },
        "s3VectorsFeatures": {
          "ragSearch": true,
          "duplicateDetection": true,
          "levelValidation": true,
          "autoCorrection": true,
          "vectorStorage": true,
          "metadataEnriched": true,
          "vectorsStored": 4,
          "searchesPerformed": 2
        }
      },
      "End": true
    }
  }
}
